{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nrequire(shiny)\nsuppressPackageStartupMessages(require(tidyverse))\nrequire(ggthemes)\nrequire(lubridate)\nrequire(stringr)\nrequire(ggrepel)\nrequire(scales)\n\n# ---- Load data\nreddit <- readr::read_csv(\"Step2CKSurvey.csv\", na = c(\"\", \"NA\", \"#N/A\")) \n\nreddit <- reddit %>%\n  mutate(\n    Date_StudyStart = mdy(Date_StudyStart), # Sys.setenv(TZ=\"America/Chicago\")   \n    STEP2.date      = mdy(STEP2.date),\n    UW_FirstPass    = UW_FirstPass/100\n  ) %>% \n  rename(UW_FP=UW_FirstPass)\n\nshinyServer(function(input, output) {\n  \n  # observeEvent({input$modelVars,{\n  #   modalDialog(\"info here\", title = NULL, footer = modalButton(\"Dismiss\"),\n  #               size = c(\"m\", \"s\", \"l\"), easyClose = FALSE)\n  # }\n  # })\n  \n  output$dynamicCheckbox <- renderUI({\n    options <- c(\"UWSA 1\"=\"UW_1\", \"UWSA 2\"=\"UW_2\",\n                 \"UW First pass\"=\"UW_FP\", \"Goal score\"=\"Goal\",\n                 \"NBME #6\"=\"NBME_6\", \"NBME #7\"=\"NBME_7\",\n                 \"NBME #8\"=\"NBME_8\")\n    toRemove <- c()\n    \n    if(!is.numeric(input$UW_1)) {toRemove <- c(toRemove, \"UWSA 1\"=\"UW_1\")}\n    if(!is.numeric(input$UW_2)) {toRemove <- c(toRemove, \"UW_2\")}\n    if(!is.numeric(input$UW_FP)) {toRemove <- c(toRemove, \"UW_FP\")}\n    if(!is.numeric(input$Goal)) {toRemove <- c(toRemove, \"Goal\")}\n    if(!is.numeric(input$NBME_6)) {toRemove <- c(toRemove, \"NBME_6\")}\n    if(!is.numeric(input$NBME_7)) {toRemove <- c(toRemove, \"NBME_7\")}\n    if(!is.numeric(input$NBME_8)) {toRemove <- c(toRemove, \"NBME_8\")}\n    \n    options <- options[ - which(options %in% toRemove)]\n    # options <- setdiff(options, toRemove)\n    \n    \n    \n    \n    checkboxGroupInput(\"modelVars\", h3(\"Score(s) to include in model\"),\n                       inline=F,  selected = c(\"UWSA 1\"=\"UW_1\"),\n                       choices = options)\n  })\n  \n  \n  \n  # ----- REACTIVES\n  \n  modelObj <- reactive({  # Expression that generates the model\n    lm(as.formula(paste0(\n      \"STEP2 ~ \", paste(input$modelVars, collapse=\" + \"),\" - 1\")), data = reddit)\n  })\n  \n  inScores <- reactive({  # Inputs from user of scores\n    in.UW_1   <- ifelse(is.integer(input$UW_1), input$UW_1, NA)\n    in.UW_2   <- ifelse(is.integer(input$UW_2), input$UW_2, NA)\n    in.UW_FP  <- ifelse(is.integer(input$UW_FP), input$UW_FP/100, NA)\n    in.NBME_6 <- ifelse(is.integer(input$NBME_6), input$NBME_6, NA)\n    in.NBME_7 <- ifelse(is.integer(input$NBME_7), input$NBME_7, NA)\n    in.NBME_8 <- ifelse(is.integer(input$NBME_8), input$NBME_8, NA)\n    in.Goal   <- ifelse(is.integer(input$Goal), input$Goal, NA)\n    \n    inputScores <- data_frame(x = c(\"Projected\"))\n    if(\"UW_1\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, UW_1 = c(in.UW_1))\n    } \n    if(\"UW_2\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, UW_2 = c(in.UW_2))\n    }\n    if(\"UW_FP\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, UW_FP = c(in.UW_FP))\n    }\n    if(\"NBME_6\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, NBME_6 = c(in.NBME_6))\n    }\n    if(\"NBME_7\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, NBME_7 = c(in.NBME_7))\n    }\n    if(\"NBME_8\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, NBME_8 = c(in.NBME_8))\n    }\n    if(\"Goal\" %in% input$modelVars) {\n      inputScores <- bind_cols(inputScores, Goal = c(in.Goal))\n    }\n    \n    # Predicton (https://rpubs.com/aaronsc32/regression-confidence-prediction-intervals)\n    inputScores %>%\n      bind_cols() %>%\n      data.frame(\n        predict(modelObj(), inputScores, interval = \"prediction\", level=input$ci/100)\n      ) %>% \n      mutate(\n        fit = round(fit),\n        lwr = round(lwr),\n        upr = round(upr)\n      ) %>%\n      rename(`EstScore`=fit, `LowerCI`=lwr, `UpperCI`=upr) # return df\n    \n    \n  })\n  \n  # ---- Graph\n  output$graph <- renderPlot({  # Prints test stuff\n    df<-inScores()\n    estScore <- df[\"EstScore\"][[1]]\n    lci <- df[\"LowerCI\"][[1]]\n    uci <- df[\"UpperCI\"][[1]]\n    \n    if(length(input$modelVars)>1) {\n      reddit %>%\n        filter(STEP2>200) %>%\n        ggplot() + \n        geom_histogram(aes(x=STEP2), alpha=0.5, binwidth=1) +\n        geom_point(aes(x=EstScore, y=10), data=df, color=\"red\") +\n        geom_label_repel(aes(x=EstScore, y=10, label=\"Your projected score\"), \n                         box.padding = unit(0.5, \"lines\"), data=df) + \n        geom_errorbarh(aes(y=10, xmin=LowerCI, xmax=UpperCI), data=df, color=\"red\") +\n        theme_fivethirtyeight() + \n        theme(axis.title=element_text())+\n        labs(x=\"STEP 2 CK score\")\n    } else {\n      df %>%\n        ggplot(aes(x=!!sym(input$modelVars), y=EstScore)) +\n        geom_jitter(aes(x=!!sym(input$modelVars), y=STEP2), alpha=0.5,\n                   data=filter(reddit, STEP2>200)) +\n        geom_smooth(aes(x=!!sym(input$modelVars), y=STEP2), alpha=0.5,\n                    data=filter(reddit, STEP2>200), color=\"black\") +\n        geom_point(color=\"red\") +\n        geom_errorbar(aes(ymin=LowerCI, ymax=UpperCI), color=\"red\") +\n        geom_label_repel(aes(label=\"Your projected score\"), \n                         box.padding = unit(0.5, \"lines\"), data=df) + \n        theme_fivethirtyeight() +\n        theme(axis.title=element_text())+\n        labs(y=\"STEP 2 CK score\")\n    }\n  })\n  \n  output$graphDrop <- renderPlot({\n    total <- nrow(filter(reddit, STEP2>200))\n    missing <- total - nobs(modelObj())\n    \n    data_frame(\n      Category=c(\"included\", \"excluded\"), \n      n=c(total-missing,missing)) %>% \n      \n      mutate(n = n/sum(n)) %>%\n      ggplot(aes(x=\"\", y=n, fill=Category)) + \n      geom_col(width=1) + \n      coord_flip() + theme_fivethirtyeight() +  \n      scale_fill_manual(values = c(\"red\", \"black\")) + \n      scale_y_continuous(labels=percent) +\n      guides(fill=\"none\") +\n      theme(plot.background=element_rect(fill=\"white\"), panel.background=element_rect(fill=\"white\")) +\n      labs(title=paste0(missing, \" (\",scales::percent(missing/total),\") omitted\"))\n  })\n  \n  \n  \n  \n  \n  # ---- Text reactives\n  output$estScore <- renderText({  # Estimated score\n    df<-inScores()\n    df[\"EstScore\"][[1]]\n  })\n  output$estCI <- renderText({     # Lower & upper CI\n    df<-inScores()\n    lci <- df[\"LowerCI\"][[1]]\n    uci <- df[\"UpperCI\"][[1]]\n    paste0(\"(\",lci,\" - \",uci,\")\")\n  })\n  \n  output$numDrop <- renderText({  # Outputs number of observations dropped\n    nobs <- nobs(modelObj())\n    total <- nrow(filter(reddit, STEP2>200))\n    paste0(nobs, \" of \", total)\n  })\n  \n  output$redditModel <- renderUI({\n    \n    df <- data_frame(\n      NameOfTest = c(\"UWSA 1\", \"UWSA 2\", \"UW first pass\", \n                     \"NBME 6\", \"NBME 7\", \"NBME 8\"),\n      Test = c(\"UW_1\",\"UW_2\",\"UW_FP\",\"NBME_6\",\"NBME_7\",\"NBME_8\"),\n      m    = c(0.5942,0.7861,1.1213,0.3944,0.5959,0.3564),\n      b    = c(105.08,56.463,172.48,160.77,114.48,168.68),\n      x    = c(input$UW_1, input$UW_2, input$UW_FP,\n               input$NBME_6, input$NBME_7, input$NBME_8)\n    ) %>%\n      filter(x>0) %>%\n      # filter(Test %in% input$modelVars) %>%\n      mutate(ProjScore = round(m*x + b)) %>%\n      select(NameOfTest, ProjScore) %>%\n      mutate(TextOut = paste0(\"<u>\",NameOfTest,\"</u>: \",ProjScore,\"<br>\"))\n    \n    textOut <- str_c(df$TextOut)\n    HTML(textOut)\n    \n    \n    \n  })\n  \n  output$modFormula <- renderText({  # Outputs the selected formula as text\n    paste(input$modelVars, collapse=\" + \")\n  })\n  \n  output$modSummary <- renderPrint({  # Prints summary of model\n    mod <- modelObj() \n    summary(mod)  # pander::pander()\n  })\n\n})\n",
    "created" : 1563297888797.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "36159487",
    "id" : "15FA23CD",
    "lastKnownWriteTime" : 1563568755,
    "last_content_update" : 1563568755007,
    "path" : "~/Github/STEP2Reddit/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}