{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Reddit STEP 2\"\nauthor: \"Hunter Ratliff, @HunterRatliff1\"\ndate: \"7/15/2019\"\noutput: html_document\nruntime: shiny\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)        # Silences most chunk outputs\n\n## Ste time\n# Sys.setenv(TZ=\"America/Chicago\")    \n\nsuppressPackageStartupMessages(require(tidyverse))\nrequire(ggthemes)\nrequire(lubridate)\nrequire(stringr)\nrequire(ggrepel)\nrequire(kableExtra)\nrequire(visreg)\nrequire(corrplot)\nrequire(kableExtra)\nrequire(gridExtra)\n# library(rhandsontable)\nrequire(shiny)\n\n# Get data\nreddit <- readr::read_csv(\"Step2CKSurvey.csv\", na = c(\"\", \"NA\", \"#N/A\")) \n\n## Ste time\n# Sys.setenv(TZ=\"America/Chicago\")   \nreddit <- reddit %>%\n  mutate(\n    Date_StudyStart = mdy(Date_StudyStart),\n    STEP2.date      = mdy(STEP2.date),\n    UW_FirstPass    = UW_FirstPass/100\n  ) %>% \n  rename(UW_FP=UW_FirstPass)\n# reddit <- readr::read_rds(\"redditSTEP1.rds\")\n```\n\n```{r}\nfluidRow(\n  column(3, inputPanel(\n    checkboxGroupInput(\"modelVars\", h3(\"Variables for model\"), inline=F, width=\"100%\",\n                       selected = c(\"UW First pass\"=\"UW_FP\"),\n                       choices = c(\"UWSA 1\"=\"UW_1\", \"UWSA 2\"=\"UW_2\", \n                                   \"UW First pass\"=\"UW_FP\", \"Goal score\"=\"Goal\",\n                                   \"NBME #6\"=\"NBME_6\", \"NBME #7\"=\"NBME_7\", \n                                   \"NBME #8\"=\"NBME_8\"))\n  )),\n  column(9, inputPanel(\n    numericInput(\"UW1\", label=\"UWSA 1\", value = NA),\n    numericInput(\"UW2\", label=\"UWSA 2\", value = NA),\n    numericInput(\"UWfp\", label=\"UW First pass (%)\", value = 72, min=1, max=100),\n    numericInput(\"goal\", label=\"Goal/target score\", value = NA),\n    numericInput(\"NBME6\", label=\"NBME 6\", value = NA),\n    numericInput(\"NBME7\", label=\"NBME 7\", value = NA),\n    numericInput(\"NBME8\", label=\"NBME 8\", value = NA)\n  ))\n)\n\nrenderUI({\n  paste0(\"Using STEP2 = \", code(paste(input$modelVars, collapse=\" + \")),\n         \" as input\")\n})\n\n  \nrenderPrint({ \n  modelFormula <- as.formula(\n    paste0(\"STEP2 ~ \", paste(input$modelVars, collapse=\" + \"),\" - 1\"))\n  \n  \n  modelFormula\n  })\n# \n# as.formula(\n#   paste0(\"STEP2 ~ \", paste(input$modelVars, collapse=\" + \"),\" - 1\"))\n\n\n# fluidRow(column(3, verbatimTextOutput(\"value\")))\n\n```\n\n\n\n# Sample linear models\n\n```{r DefineFormula}\nmodelFormula <- \"STEP2 ~ UW_1 +  UW_FP - 1\"\n\n## For testing how many results aren't blank\n# nrow(filter(reddit, !is.na(UWSA2), !is.na(NBME17)))\n```\n\nUsing the formula: <code> `r modelFormula` </code>\n\n```{r DefineModel}\n### Sample linear models\nmodelFormula <- as.formula(modelFormula)\nlm2 <- lm(modelFormula, data = reddit) #define model\nsummary(lm2)\n# coefficients(lm2)\n# residuals(lm2)\n# fitted(lm2)\n```\n\n## Predicted scores\n\nThis predicts our scores (based on the model above)\n\n```{r PredictScoreTable}\n\ninputScores <- data_frame(\n  Person = c(\"Hunter\", \"Laura\", \"Wes\", \"Test\"),\n  UW_1   = c(260, NA, NA, 260),\n  # UW_2   = c(NA, NA, NA, 260),\n  UW_FP  = c(0.741, NA, NA, 0.741),\n  # NBME_6 = c(NA, NA, NA, NA),\n  # NBME_7 = c(NA, NA, NA, NA),\n  # NBME_8 = c(NA, NA, NA, NA),\n  Goal   = c(260, NA, NA, NA)\n)\n\ninputScores <- inputScores %>%\n  bind_cols() %>%\n  data.frame(\n    predict(lm2, inputScores, interval = \"prediction\", level=.95)\n  )\ninputScores %>% \n  mutate(\n    fit = round(fit),\n    lwr = round(lwr),\n    upr = round(upr)\n  ) %>%\n  rename(`Fitted score`=fit, `Lower 95% CI`=lwr, `Upper 95% CI`=upr) %>%\n  knitr::kable(caption = \"Predicted scores\")    \n```\n\n## Validate model\n\n\n\n\n\n\n\n\n## Inputs and Outputs\n\nYou can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change.  This demonstrates how a standard R plot can be made interactive by wrapping it in the Shiny `renderPlot` function. The `selectInput` and `sliderInput` functions create the input widgets used to drive the plot.\n\n```{r eruptions, echo=FALSE}\ninputPanel(\n  selectInput(\"n_breaks\", label = \"Number of bins:\",\n              choices = c(10, 20, 35, 50), selected = 20),\n  \n  sliderInput(\"bw_adjust\", label = \"Bandwidth adjustment:\",\n              min = 0.2, max = 2, value = 1, step = 0.2)\n)\n\nrenderPlot({\n  hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),\n       xlab = \"Duration (minutes)\", main = \"Geyser eruption duration\")\n  \n  dens <- density(faithful$eruptions, adjust = input$bw_adjust)\n  lines(dens, col = \"blue\")\n})\n```\n\n\n\n\n",
    "created" : 1563297886004.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "70047264",
    "id" : "A357C8FB",
    "lastKnownWriteTime" : 1563288470,
    "last_content_update" : 1563288470,
    "path" : "~/Github/STEP2Reddit/Reddit STEP 2.Rmd",
    "project_path" : "Reddit STEP 2.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}